			+--------------------+
			|        CS 140      |
			| PROJECT 1: THREADS |
			|   DESIGN DOCUMENT  |
			+--------------------+
				   
---- GROUP ----

>> Fill in the names and email addresses of your group members.

Arenas Ayala Ramón >ramon_cmk@ciencias.unam.mx>
Lugo Cano Daniel <danylugo@ciencias.unam.mx>
Millán Pimentel Oscar Fernando <o_fernando_m_p@ciencias.unam.mx>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

Habíamos olvidado enviar este documento en la entrega anterior, además de que enviamos toda la base
de código de pintos y no solo los archivos modificados, nuestro compañero Ramón habia olvidado hacer la entrega asi 
que el lo hará en la forma correcta por medio del Classroom.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

===========
ALARM CLOCK
===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

> static struct list slept_list; := El proposito de esta lista es guardar los
  threads que estan dormidos.

> struct slept_thread {
    struct thread *thread;
    int64_t wake_up_tick;
    struct list_elem elem; };
  := Esta struct nos sire para manejar los threads dormidos, tiene un apuntador a un
     thread el cual es el thread que esta dormido, un int que es el tick en el que debe despertar
     y un list elem que servira para poder encolarlos en la slept_list

---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to timer_sleep(),
>> including the effects of the timer interrupt handler.
	Primero se calcula el tick en donde desperrtara el proceso
	y después crea un struct de slept_thread con el thread actual
	y ese tick para despertar. Posteriormente se apagan las interrupciones
	y se pone el thread en la lista, de manera que la lista este ordenada
	segun el tick donde despierta.

>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?
	Cuando se meten a la cola de dormidos de manera ordenada (ascendentemente),
	asi cuando el primer thread en despertar debe estar en la cabeza de la lista y no es necesario
	revisar toda la lista.

---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?
	Cuando se llama timer_sleep() se apagan las interrupciones, lo cual
	apaga la concurrencia, de esta manera el proceso que lo aplico primero sera el que
	modifique la slept_list y al terminar volvera a encender las interrupciones para que los
	demas procesos lo hagan

>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?
	Se resuelve de manera similar a como lo mencionams arriba

---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> another design you considered?
	En este caso no se esta haciendo una llamada constante a thread_yield(), por lo que no se estan
	haciendo cambias de contexto lo cual es mucho mejor.
